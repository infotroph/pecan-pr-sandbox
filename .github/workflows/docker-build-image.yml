name: build-image

on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      build-context:
        required: true
        type: string
      dockerfile:
        required: true
        type: string
      r-version:
        required: true
        type: string
      from-image:
        required: false
        default: ''
        type: string
      model-version:
        required: false
        default: ''
        type: string
      platforms:
        required: false
        default: "linux/amd64"
        type: string

jobs:
 build:
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:

      - name: lowercase image name
        id: name
        run: echo "image_name=$(echo ${{ inputs.image-name }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: set FROM_IMAGE only if specified
        id: from
        shell: bash
        run: |
          echo "FROM_IMAGE_IF_SET=$(
            [[ -n '${{ inputs.from-image }}' ]] &&
            echo 'FROM_IMAGE=${{ inputs.from-image }}'
            )" >> $GITHUB_OUTPUT

      - name: set MODEL_VERSION only if specified
        id: modelver
        shell: bash
        run: |
          echo "MODEL_VERSION_IF_SET=$(
            [[ -n '${{ inputs.model-version }}' ]] &&
            echo 'MODEL_VERSION=${{ inputs.model-version }}'
            )" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v4

      # create metadata for image
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.actor }}/${{ github.repository }}/${{ steps.name.outputs.image_name }}
          # pecan/${{ steps.name.outputs.image_name }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      # setup docker build
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Inspect Builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      # login to registries
      # - name: Login to DockerHub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # build the docker images
      - name: Build and push ${{ steps.name.outputs.image_name }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.build-context }}
          file: ${{ inputs.dockerfile }}
          push: true
          platforms: ${{ inputs.platforms }}
          # cache-from: type=registry,ref=pecan/${{ steps.name.outputs.image_name }}:buildcache
          # cache-to: type=registry,ref=pecan/${{ steps.name.outputs.image_name }}:buildcache,mode=max
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            IMAGE_VERSION=${{ steps.meta.outputs.version }}
            PECAN_VERSION=${{ steps.meta.outputs.version }}
            R_VERSION=${{ inputs.r-version }}
            ${{ steps.from.outputs.FROM_IMAGE_IF_SET }}
            ${{ steps.modelver.outputs.MODEL_VERSION_IF_SET }}
            GITHUB_PAT=${{ secrets.GITHUB_TOKEN }}
            PECAN_GIT_BRANCH=${{ github.head_ref || github.ref_name }}
            PECAN_GIT_CHECKSUM=${{ github.sha }}
            PECAN_GIT_DATE=${{ github.event.repository.updated_at }}
